package com.sortPackage;

/**
 * @Author: leaderHoo
 * @Date: 2019/12/28 21:17
 * @desc: 一亿个浮点数，找出最大的前1万个 ,下边都是思路分析
 */
public class TopMUsingCase {
    // 方法一 ： 不合适方法
    public void sort1(){
        // 首先，浮点数占四个字节，1亿个数， 1M = 1000KB = 1000 * 1000B && 1B = 1字节
        // 四个字节 * 1 亿个数 = 4 亿 B = 400M
        // 内存中可以存储成功
        // 方法一 ：  循环，每次取最大的，如果取前一万个
        // 从N个数中取最大数，大概需要比较N-1次；一亿个数取一个最大的要1亿，找一万个，需要1万亿
        //相当不合适
    }
    // 方法二： 分而治之的思想
    public void sort2(){
        // 比如，以100万为一块，分成一百块，分别对着一百块排序，
        // 要前一万，可以每块只要前一万
        //者就剩下100块1万个数 ， 在取前一万即可
    }
    // 方法三： 外部排序的思想
    public void sort3(){
        // 一亿个数，太大，可以先读出100万个数，排序，找出最大的一万个数，
        // 之后遍历剩下的数据，如果有数据比最小值大，就替换，重排序
        //比如堆排序就是这种思想

    }
}
